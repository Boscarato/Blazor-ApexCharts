@using System.Diagnostics
@using System.Text.Json

<Button OnClick=SerializeTest>Serialize Test</Button>

<ItemSelect Label="Datapoints" Items=points @bind-SelectedValue=pointsToLoad Changed=LoadData />


<Dimmer Active=isLoading ShowSpinner=false>
    <ApexChart TItem="TimeSeries"
               Title="Value"
               Height="150"
               XAxisType="XAxisType.Datetime"
               Debug @ref=chart>

        <ApexPointSeries TItem="TimeSeries"
                         Data=data
                         Stroke="@(new SeriesStroke { Width = 2, Color="#1F15E5"})" />


        @* <ApexPointSeries TItem="TimeSeries"
            Items="timeSeries"
            Name="Value"
            SeriesType="SeriesType.Line"
            XValue="@(e => e.Date)"
            YValue="@( e=> e.Value)"
            OrderBy="e=>e.X"
            Stroke="@(new SeriesStroke { Width = 2, Color="#1F15E5"})" />*@
    </ApexChart>
</Dimmer>

@if (isLoading)
{
   <span>Loading...</span> 
}
else
{
    @message
}


@code {


    private ApexChart<TimeSeries> chart;
    private List<int> points = new List<int> { 100, 1000, 5000, 10000 };
    private int pointsToLoad = 100;
    private IEnumerable<TimeSeries> timeSeries = new TimeSeriesGenerator(10000).TimeSeries;
    private string message;
    private IEnumerable<DataPoint<TimeSeries>> data;

    private bool isLoading;

    private async Task LoadData()
    {
        isLoading = true;
        await Task.Delay(10);
        var sw = new Stopwatch();
        sw.Start();

        data = timeSeries.Take(pointsToLoad).OrderBy(e => e.Date).Select(e => new DataPoint<TimeSeries>
            {
                X = e.Date,
                Y = e.Value,
                Items = new List<TimeSeries> { e }
            });

        await Task.Delay(10);

        await chart.UpdateSeries(false);
        sw.Stop();

        message = $"Updated {pointsToLoad} points in {sw.ElapsedMilliseconds.ToString("N0")}ms";
        isLoading = false;
    }

    private void SerializeTest()
    {
        var series = chart.Options.Series;

        //var series = new Series<TimeSeries>

        //series.Name = "kolla";

        //var dataPoints = new List<IDataPoint<TimeSeries>>();
        //for (var i = 0; i < pointsToLoad; i++)
        //{
        //    dataPoints.Add(new DataPoint<TimeSeries> { Y = 100000, X = $"index {i}" });
        //}
        //series.Data = dataPoints;
        var options = new ChartSerializer().GetOptions<TimeSeries>();


        var sw = new Stopwatch();
        sw.Start();

        // var result = serializer.
        var result = System.Text.Json.JsonSerializer.Serialize(series, options);
        sw.Stop();
        message = $"Test [{pointsToLoad}] {sw.ElapsedMilliseconds.ToString("N")}ms";

    }



    }
